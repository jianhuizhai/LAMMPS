#!/bin/bash
export LC_NUMERIC=C

# (C) Pierre Hirel - pierre.hirel@univ-lille1.fr
# This bash script is distributed under the terms
# of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#     http://www.gnu.org/licenses/

# PURPOSE:
# This script reads the log files generated by LAMMPS
# during a Nudged Elastic Band (NEB) calculation,
# and extracts the final energy path (energy vs image number).
# Energies are all shifted so that the energy of the first
# image (image #0) is zero.

# NOTE:
# The LAMMPS calculation should be finished before running
# this script. If it is not finished, then this script will
# build the NEB path only from the file "log.lammps",
# which is less accurate.

# PRE-REQUISITE:
# (1) When you run this script, LAMMPS log files should exist
#     in the current working directory, named "log.lammps.0",
#     "log.lammps.1", and so on.
# (2) If they do not exist, this script will look for a file
#     named "log.lammps".
# (3) If none of the above files exist, then the script will
#     try to download a "log.lammps" file from the remote
#     machines defined below (assuming that the path on the
#     remote machine is the same as the current working dir).

# Define a list of machines to download from
# The script will attempt to download log.lammps from these machines,
# assuming it is located in the same path as the current working directory.
machines='zeus thot'

# Just a fancy header
printf "___________________________________________________________\n"
printf "\e[1m                     N E B P A T H\n"
printf "              Getting NEB  energy barrier\n"
printf "               from a LAMMPS calculation\e[0m\n"
printf "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n"

# Define output file name
outfile=$1
if [ "${outfile}" = "" ] ; then
  outfile='nebpath.dat'
fi
while [ -e $outfile ] ; do
  printf "<?> The file $outfile already exists. Overwrite? (y/n): "
  read answer
  if [[ "${answer}" = "y" || "${answer}" = "Y" ]] ; then
    rm -f $outfile
  else
    printf "<?> Enter a name for the output file: "
    read outfile
  fi
done
rm -f $outfile

printf ">>> Seeking LAMMPS log files ...\n"

# Check how many log files exist
# Note: it is assumed that there are never more than 100 NEB images
Nfiles=0
for i in {0..100..1}; do
  if [ -e log.lammps.$i ]; then
    let Nfiles=$Nfiles+1
  else
    break
  fi
done

if [ "$Nfiles" == "0" ] ; then
  # The LAMMPS log files were not found: log.lammps.0 to log.lammps.N
  # => fall back to log.lammps

  if [ -e log.lammps ] ; then
    printf "..> Found log.lammps in current directory.\n"
  else
    # No log.lammps file exists in current directory
    # => try to download from list of machines
    
    if [ ! -z "$machines" ] ; then
      printf "\e[1m/!\ WARNING:\e[0m no log file in current directory!\n"
      printf ">>> Attempting to download log files from remote machines:\n"
      for m in $machines ; do
        if [ ! -e log.lammps ] ; then
          printf "..> $m ..."
          scp -q $m:$(pwd)/log.* . >/dev/null 2>&1
        fi
        if [ ! -e log.lammps ] ; then
          printf "\e[31m FAILED\e[0m\n"
        else
          printf "\e[32m SUCCESS!\e[0m\n"
          break
        fi
      done

      if [ ! -e log.lammps ] ; then
        printf "\e[1mX!X ERROR:\e[0m unable to retrieve LAMMPS log files\n"
        printf "    from any known remote machine, aborting.\n"
        printf "___________________________________________________________\n"
        exit
      fi
    fi
    
  fi

  if [ ! -e log.lammps ] ; then
    printf "\e[1mX!X ERROR:\e[0m no LAMMPS log file in current directory, aborting.\n"
    printf "___________________________________________________________\n"
    exit
  fi
fi

printf ">>> Generating NEB path from files ...\n"

# Count log files again
Nfiles=0
for i in {0..100..1}; do
  if [ -e log.lammps.$i ]; then
    let Nfiles=$Nfiles+1
  else
    break
  fi
done

if [ "$Nfiles" -gt "0" ] ; then
  
  # Check if calculation is finished
  sim_finished=$(grep "Total wall time" log.lammps.0 | wc -l)
  
  if [ "$sim_finished" -gt "0" ] ; then
    printf "..> Using $Nfiles NEB images in current directory.\n"
    printf "# NEB path from LAMMPS calculation\n" > $outfile
    # Read the energy from each log file, and write it to the output file
    for((i=0;i<$Nfiles;i++)) do
      img=$(echo "$i/($Nfiles-1)" | bc -l)
      energy=$(grep -A 1 "Energy initial" log.lammps.$i | tail -n 1 | awk '{print $3}')
      if [ "$i" = "0" ] ; then
        # Energy of image #0
        eref=$energy
      fi
      # Normalize all energies to energy of image #0
      energy=$(echo "$energy - $eref" | bc -l)
      printf "%.6f \t %.6f \n" $img $energy >> $outfile
    done

  fi
fi

if [ ! -e $outfile ] ; then

  # The NEB path was not extracted from log.lammps.N files
  # probably because the NEB calculation is not finished
  # => Construct it from the log.lammps file
  printf "..> Using log.lammps\n"
  printf "\e[1m/!\ WARNING:\e[0m results may not be fully accurate.\n"
  printf "    It is recommended to run this script again\n"
  printf "    with all log files: 'log.lammps.0' to 'log.lammps.N'.\n"
  printf "# NEB path from LAMMPS calculation\n" > $outfile
  # Keep only the last line of log.lammps
  # Write NEB path to tmpfile
  tail -n 1 log.lammps | tr -s ' ' | cut -d " " -f10- | awk '{for (i=0;i<=NF/2-1;i++) {print $(2*i+1) "\t" $(2*i+2) ;} }' > tmpfile
  
  # Normalize NEB path, write it to outfile
  eref=$(head -n 1 tmpfile | awk '{print $2}')
  awk -v e=$eref '{printf "%.6f \t %.6f \n", $1, $2-(e)}' tmpfile >> $outfile
  
  rm -f tmpfile
  
fi

printf ">>> The NEB path was written into: $outfile\n"

# Activation energy to cross barrier forward
Ea=$(sort -k2 -gr $outfile | head -n 1 | awk '{print $2}')
printf "..> Activation energy: Initial -> Final:   Ea = $Ea eV.\n"

# Activation energy to cross barrier backwards
Ef=$(tail -n 1 $outfile | awk '{print $2}')
Eb=$(echo "$Ea - ($Ef)" | bc -l)
printf "                         Final -> Initial: Eb = $Eb eV.\n"

printf "\o/ Done!\n"
printf "___________________________________________________________\n"
